ext.'signing.keyId' = findProperty('signing.keyId') ?: System.getenv().GNU_KEY_ID ?: ''
ext.'signing.secretKeyRingFile' = findProperty('signing.secretKeyRingFile') ?: System.getenv().GNU_KEY_FILE ?: 'DEFAULT' // TODO
ext.'signing.password' = findProperty('signing.password') ?: System.getenv().GNU_KEY_PASSWORD ?: ''

nexusStaging {
    username = findProperty('ossrhUser') ?: System.getenv().OSSRH_USER ?: ''
    password = findProperty('ossrhPassword') ?: System.getenv().OSSRH_PASSWORD ?: ''
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allScala
}

task writeJavadocReadme {
    doLast {
        def readmeFile = new File(javadoc.destinationDir, 'README.txt')

        GFileUtils.mkdirs(readmeFile.parentFile)
        readmeFile.createNewFile()
        readmeFile.text = 'Empty file to pass publishing requirements'
    }
}

task javadocJar(type: Jar, dependsOn: [javadoc, writeJavadocReadme]) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    shouldRunAfter('test')
    classifier = 'scaladoc'
    from scaladoc.destinationDir
}

tasks.build.dependsOn(scaladocJar)

artifacts {
    archives javadocJar, sourcesJar, scaladocJar
}

signing {
    required { gradle.taskGraph.hasTask(tasks.uploadArchives) }

    sign configurations.archives
}

tasks.withType(Sign).each {
    it.onlyIf { gradle.taskGraph.hasTask(tasks.uploadArchives) }
}

def configurePom(MavenPom pom) {
    pom.project {
        artifactId "${project.name}${s}"
        name "$project.group:${project.name}"
        description project.description
        packaging 'jar'
        url 'https://github.com/tmccarthy/countstv'
        licenses {
            license {
                name 'BSD 3-Clause'
                url 'https://opensource.org/licenses/BSD-3-Clause'
                distribution 'repo'
            }
        }
        scm {
            url 'https://github.com/tmccarthy/countstv'
            connection 'git@github.com:tmccarthy/countstv.git'
            developerConnection 'git@github.com:tmccarthy/countstv.git'
        }
        developers {
            developer {
                name 'Timothy McCarthy'
                email "ebh042@gmail.com"
            }
        }
    }
}

install {
    repositories {
        mavenInstaller {
            configurePom(pom)
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusStaging.username, password: nexusStaging.password)
            }

            configurePom(pom)
        }
    }

    onlyIf { rootProject.ext.versionIsFinal }
}

task releaseIfFinalVersion(type: GradleBuild) {
    onlyIf { rootProject.ext.versionIsFinal }

    startParameter.logLevel = LogLevel.INFO
    startParameter.showStacktrace = ShowStacktrace.ALWAYS_FULL

    tasks = ['assemble', 'uploadArchives', 'closeAndReleaseRepository']
}
